package clang;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * <i>native declaration : src/main/c/clang-c/Index.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CXCursorAndRangeVisitor extends Structure {
	/// C type : void*
	public Pointer context;
	/// C type : visit_callback
	public CXCursorAndRangeVisitor.visit_callback visit;
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface visit_callback extends Callback {
		int apply(Pointer context, clang.CXCursor.ByValue CXCursor1, clang.CXSourceRange.ByValue CXSourceRange1);
	};
	public CXCursorAndRangeVisitor() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"context", "visit"});
	}
	/**
	 * @param context C type : void*<br>
	 * @param visit C type : visit_callback
	 */
	public CXCursorAndRangeVisitor(Pointer context, CXCursorAndRangeVisitor.visit_callback visit) {
		super();
		this.context = context;
		this.visit = visit;
		initFieldOrder();
	}
	public static class ByReference extends CXCursorAndRangeVisitor implements Structure.ByReference {
		
	};
	public static class ByValue extends CXCursorAndRangeVisitor implements Structure.ByValue {
		
	};
}
