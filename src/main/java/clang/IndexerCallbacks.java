package clang;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
/**
 * <i>native declaration : src/main/c/clang-c/Index.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IndexerCallbacks extends Structure {
	/**
	 * \brief Called periodically to check whether indexing should be aborted.<br>
	 * Should return 0 to continue, and non-zero to abort.<br>
	 * C type : abortQuery_callback
	 */
	public IndexerCallbacks.abortQuery_callback abortQuery;
	/**
	 * \brief Called at the end of indexing; passes the complete diagnostic set.<br>
	 * C type : diagnostic_callback
	 */
	public IndexerCallbacks.diagnostic_callback diagnostic;
	/// C type : enteredMainFile_callback
	public IndexerCallbacks.enteredMainFile_callback enteredMainFile;
	/**
	 * \brief Called when a file gets \#included/\#imported.<br>
	 * C type : ppIncludedFile_callback
	 */
	public IndexerCallbacks.ppIncludedFile_callback ppIncludedFile;
	/**
	 * \brief Called when a AST file (PCH or module) gets imported.<br>
	 * <br>
	 * AST files will not get indexed (there will not be callbacks to index all<br>
	 * the entities in an AST file). The recommended action is that, if the AST<br>
	 * file is not already indexed, to initiate a new indexing job specific to<br>
	 * the AST file.<br>
	 * C type : importedASTFile_callback
	 */
	public IndexerCallbacks.importedASTFile_callback importedASTFile;
	/**
	 * \brief Called at the beginning of indexing a translation unit.<br>
	 * C type : startedTranslationUnit_callback
	 */
	public IndexerCallbacks.startedTranslationUnit_callback startedTranslationUnit;
	/// C type : indexDeclaration_callback
	public IndexerCallbacks.indexDeclaration_callback indexDeclaration;
	/**
	 * \brief Called to index a reference of an entity.<br>
	 * C type : indexEntityReference_callback
	 */
	public IndexerCallbacks.indexEntityReference_callback indexEntityReference;
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface abortQuery_callback extends Callback {
		int apply(Pointer client_data, Pointer reserved);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface diagnostic_callback extends Callback {
		void apply(Pointer client_data, Pointer CXDiagnosticSet1, Pointer reserved);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface enteredMainFile_callback extends Callback {
		Pointer apply(Pointer client_data, Pointer mainFile, Pointer reserved);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface ppIncludedFile_callback extends Callback {
		Pointer apply(Pointer client_data, CXIdxIncludedFileInfo CXIdxIncludedFileInfoPtr1);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface importedASTFile_callback extends Callback {
		Pointer apply(Pointer client_data, CXIdxImportedASTFileInfo CXIdxImportedASTFileInfoPtr1);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface startedTranslationUnit_callback extends Callback {
		Pointer apply(Pointer client_data, Pointer reserved);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface indexDeclaration_callback extends Callback {
		void apply(Pointer client_data, CXIdxDeclInfo CXIdxDeclInfoPtr1);
	};
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	/// <i>native declaration : src/main/c/clang-c/Index.h</i>
	public interface indexEntityReference_callback extends Callback {
		void apply(Pointer client_data, CXIdxEntityRefInfo CXIdxEntityRefInfoPtr1);
	};
	public IndexerCallbacks() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new String[]{"abortQuery", "diagnostic", "enteredMainFile", "ppIncludedFile", "importedASTFile", "startedTranslationUnit", "indexDeclaration", "indexEntityReference"});
	}
	/**
	 * @param abortQuery \brief Called periodically to check whether indexing should be aborted.<br>
	 * Should return 0 to continue, and non-zero to abort.<br>
	 * C type : abortQuery_callback<br>
	 * @param diagnostic \brief Called at the end of indexing; passes the complete diagnostic set.<br>
	 * C type : diagnostic_callback<br>
	 * @param enteredMainFile C type : enteredMainFile_callback<br>
	 * @param ppIncludedFile \brief Called when a file gets \#included/\#imported.<br>
	 * C type : ppIncludedFile_callback<br>
	 * @param importedASTFile \brief Called when a AST file (PCH or module) gets imported.<br>
	 * <br>
	 * AST files will not get indexed (there will not be callbacks to index all<br>
	 * the entities in an AST file). The recommended action is that, if the AST<br>
	 * file is not already indexed, to initiate a new indexing job specific to<br>
	 * the AST file.<br>
	 * C type : importedASTFile_callback<br>
	 * @param startedTranslationUnit \brief Called at the beginning of indexing a translation unit.<br>
	 * C type : startedTranslationUnit_callback<br>
	 * @param indexDeclaration C type : indexDeclaration_callback<br>
	 * @param indexEntityReference \brief Called to index a reference of an entity.<br>
	 * C type : indexEntityReference_callback
	 */
	public IndexerCallbacks(IndexerCallbacks.abortQuery_callback abortQuery, IndexerCallbacks.diagnostic_callback diagnostic, IndexerCallbacks.enteredMainFile_callback enteredMainFile, IndexerCallbacks.ppIncludedFile_callback ppIncludedFile, IndexerCallbacks.importedASTFile_callback importedASTFile, IndexerCallbacks.startedTranslationUnit_callback startedTranslationUnit, IndexerCallbacks.indexDeclaration_callback indexDeclaration, IndexerCallbacks.indexEntityReference_callback indexEntityReference) {
		super();
		this.abortQuery = abortQuery;
		this.diagnostic = diagnostic;
		this.enteredMainFile = enteredMainFile;
		this.ppIncludedFile = ppIncludedFile;
		this.importedASTFile = importedASTFile;
		this.startedTranslationUnit = startedTranslationUnit;
		this.indexDeclaration = indexDeclaration;
		this.indexEntityReference = indexEntityReference;
		initFieldOrder();
	}
	public static class ByReference extends IndexerCallbacks implements Structure.ByReference {
		
	};
	public static class ByValue extends IndexerCallbacks implements Structure.ByValue {
		
	};
}
